load_module modules/ngx_http_cache_purge_module.so;

worker_processes 2;
error_log         "/opt/bitnami/openresty/nginx/logs/error.log";
pid               "/opt/bitnami/openresty/nginx/tmp/nginx.pid";

events {
    worker_connections 1024;
}

env SECDN_APIKEY_DIR;
env MINIO_SECRET_KEY;

http {
    include       "/opt/bitnami/openresty/nginx/conf/resolver.conf";
    include       mime.types;
    default_type  application/octet-stream;

    map $request_uri $sanitized_request_uri {
        ~(?<prefix>.*Signature=)[^&]*(?<suffix>&?.*)    $prefix[MASKED]$suffix;
        default                                       $request_uri;
    }
    log_format masked '$remote_addr - $remote_user [$time_local] '
                      '"$request_method $sanitized_request_uri $server_protocol" $status $body_bytes_sent "$http_referer"'
                      '"$http_user_agent" "$http_x_forwarded_for" "$host" $request_time '
                      'upstream=$upstream_addr '
                      'status=$upstream_status '
                      'response_time=$upstream_response_time '
                      'cache_status=$upstream_cache_status';
    access_log "/opt/bitnami/openresty/nginx/logs/access.log" masked;
    add_header    X-Frame-Options SAMEORIGIN;

    client_body_temp_path  "/opt/bitnami/openresty/nginx/tmp/client_body" 1 2;
    proxy_temp_path        "/opt/bitnami/openresty/nginx/tmp/proxy" 1 2;
    fastcgi_temp_path      "/opt/bitnami/openresty/nginx/tmp/fastcgi" 1 2;
    scgi_temp_path         "/opt/bitnami/openresty/nginx/tmp/scgi" 1 2;
    uwsgi_temp_path        "/opt/bitnami/openresty/nginx/tmp/uwsgi" 1 2;

    sendfile           on;
    tcp_nopush         on;
    tcp_nodelay        off;
    gzip               on;
    gzip_http_version  1.0;
    gzip_comp_level    2;
    gzip_proxied       any;
    gzip_types         text/plain text/css application/javascript text/xml application/xml+rss;
    keepalive_timeout  65;
    ssl_protocols      TLSv1 TLSv1.1 TLSv1.2 TLSv1.3;
    ssl_ciphers        HIGH:!aNULL:!MD5;
    client_max_body_size 80M;
    server_tokens off;

    absolute_redirect  off;
    port_in_redirect   off;

    # virtual host
    vhost_traffic_status_zone;

    include  "/opt/bitnami/openresty/nginx/conf/nginx/server_blocks/*.conf";

    proxy_cache_path /tmp/cache levels=1:2 keys_zone=tmpcache:10m max_size=1g;

    # Lua Block
    lua_package_path "/opt/bitnami/openresty/nginx/lua/?.lua;;";
    # lua_code_cache off; # this will hurt performance
    lua_shared_dict secrets 1m;
    init_worker_by_lua_block {
        local dir = os.getenv("SECDN_APIKEY_DIR")
        local auth = require("api_key_auth")
        local ok, err = auth.load(dir)
        if ok then
            ngx.log(ngx.INFO, "[init_worker] API keys loaded and cached")
        else
            ngx.log(ngx.ERR, "[init_worker] failed to load API keys: ", err)
        end

        local key = os.getenv("MINIO_SECRET_KEY")
        if key then
            ngx.shared.secrets:set("MINIO_SECRET_KEY", key)
            ngx.log(ngx.INFO, "[init_worker] MinIO Secret key loaded and cached")
        else
            ngx.log(ngx.ERR, "[init_worker] failed to load MINIO_SECRET_KEY!")
        end

        -- 高精度時間
        local ffi = require "ffi"
        ffi.cdef[[
            typedef long time_t;
            typedef long suseconds_t;
            typedef struct timeval {
                time_t      tv_sec;
                suseconds_t tv_usec;
            } timeval;
            int gettimeofday(struct timeval *tv, void *tz);
        ]]
    }

    upstream u_private_minio_bucket {
        keepalive 128;
        server minio:9000;
    }

    server {
        listen 8080;
        listen 8443 ssl;
        ssl_certificate /opt/bitnami/openresty/nginx/conf/certs/localhost.pem;
        ssl_certificate_key /opt/bitnami/openresty/nginx/conf/certs/localhost-key.pem;

        include  "/opt/bitnami/openresty/nginx/conf/bitnami/*.conf";

        add_header X-Cache-Status $upstream_cache_status;
        proxy_cache tmpcache;
        proxy_cache_lock on;
        proxy_cache_lock_age 10s;
        proxy_cache_lock_timeout 10s;
        proxy_cache_key "$scheme$request_method$host$request_uri";
        proxy_cache_valid 200 10m;

        location /metrics {
            vhost_traffic_status_display;
            vhost_traffic_status_display_format prometheus;
            vhost_traffic_status_histogram_buckets 0.005 0.01 0.05 0.1 0.5 1 5 10;
        }

        location /status {
            vhost_traffic_status_display;
            vhost_traffic_status_display_format html;
            vhost_traffic_status_histogram_buckets 0.005 0.01 0.05 0.1 0.5 1 5 10;
        }

        location = /benchmark_signer {
            content_by_lua_file lua/benchmark_signer.lua;
        }

        location = /benchmark_timer {
            content_by_lua_file lua/benchmark_timer.lua;
        }

        location = /api/keys {
            # allow 127.0.0.1;
            # deny all;
            set $cdn_enable_cors_on_failure 1;
            set $api_key_name "secdn-admin";
            access_by_lua_file lua/api_key_check.lua;
            content_by_lua_block {
                if ngx.req.get_method() ~= "GET" then
                    ngx.status = ngx.HTTP_NOT_ALLOWED
                    ngx.say("HTTP method not allowed")
                    return
                end

                local auth = require("api_key_auth")
                ngx.say("Loaded keys:")
                for _, k in ipairs(auth.list()) do
                    ngx.say("- ",k)
                end
            }
        }

        location = /lua-status {
            content_by_lua_block {
                ngx.header.content_type = "text/plain"
                ngx.say("Lua Debug Info")
                ngx.say("--------------")
                ngx.say("OpenResty Version: ", ngx.config.nginx_version)
                ngx.say("LuaJIT Version: ", jit and jit.version or "N/A")
                ngx.say("Hostname: ", ngx.var.hostname)
                ngx.say("ngx.time(): ", ngx.time())
            }
        }

        location /player {
            proxy_pass http://nextjs-player:3000/player;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            # WebSocket support for hot-reloading
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
        }

        location /test/cookie {
            set $api_key_name "user-a";
            access_by_lua_file lua/cookie_check.lua;
            echo "cookie ok";
        }

        location /test/signed-url-prefix {
            set $api_key_name "user-a";
            access_by_lua_file lua/signed_url_prefix_check.lua;
            echo "signed url prefix ok";
        }

        location /test/apikey {
            set $api_key_name "user-a";
            access_by_lua_file lua/api_key_check.lua;
            echo "/test/apikey";
        }

        location /test/minio/ {
            proxy_pass http://127.0.0.1:8081/bucket-a/;
        }

        location /test/all/ {
            set $api_key_name "user-a";
            access_by_lua_file lua/api_key_check.lua;
            proxy_pass http://127.0.0.1:8081/bucket-a/;
        }

        location /minio/ {
            set $api_key_name "user-a";
            access_by_lua_file lua/api_key_check.lua;
            proxy_pass http://127.0.0.1:8081/;
        }

        location / {
            proxy_pass http://httpbin;
            proxy_cache_purge PURGE purge_all from all;
        }

        location ~ /purge(/.*) {
            # 這裡的$1，不包含query string，只有path的部份
            # 配合 proxy_cache_key "$scheme$request_method$host$request_uri";
            # 需加上$is_args$args，可指定清除帶query string的cache
            proxy_cache_purge tmpcache $scheme$request_method$host$1$is_args$args;
        }
    }

    server {
        listen 127.0.0.1:8081;

        location ~ ^/([^/]+)/(.*)$ {
            set $minio_schema "http";
            set $minio_host "minio:9000";
            set $access_key "bucket-key";
            set $bucket_name $1;
            set $object_key $2;

            access_by_lua_file /opt/bitnami/openresty/nginx/lua/signer.lua;
            proxy_set_header Host $minio_host;
            proxy_pass http://u_private_minio_bucket/$bucket_name/$object_key;
        }
    }
}
